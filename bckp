#!/bin/bash
# Author           : Kamil Królikowski ( kamil-krolikowski@outlook.com )
# Created On       : 11.06.2017
# Last Modified By : Kamil Królikowski ( kamil-krolikowski@outlook.com )
# Last Modified On : 13.06.2017 
# Version          : 1.0
#
# Description      : Simple script for performing backup, sync, archiving actions
# Opis
#
# Licensed under GPL (see /usr/share/common-licenses/GPL for more details
# or contact # the Free Software Foundation for a copy)


# TODO:DONE remove first lines with dirs itself -> its not necessary to try to copy them DONE
# TODO: check if comparison is correct
# TODO: add incremetal bckp function
# TODO: maybe change files comparison order (md5 before size/mod date)???
VERSION="1.0"

function dispose() # trap EXIT function
{
    # echo "Dispose"
    if [ -v DEST_FILES_LIST_TMP_FILE ];then
        rm "$DEST_FILES_LIST_TMP_FILE"
    fi
    if [ -v SRC_FILES_LIST_TMP_FILE ];then
        rm "$SRC_FILES_LIST_TMP_FILE"
    fi
}

function print_version()
{
    echo "bckp version: $VERSION"
}

function print_verbose_message()
{
    if [ "$VERBOSE" = true ] 
    then
        echo $1
    fi
}

function print_usage()
{
    printf "Usage:\n"
    printf "%-3s %-15s %s\n" -s --src "Specify source"
    printf "%-3s %-15s %s\n" -d --dest "Specify destination"
    printf "%-3s %-15s %s\n" -m --mirror "Mirror backup mode (default)"
    printf "%-3s %-15s %s\n" -i --incremental "Incremental backup mode"
    printf "%-3s %-15s %s\n" -v --version "Version"
    printf "%-3s %-15s %s\n" -h --help "Help"
    printf "%-3s %-15s %s\n" -V --verbose "Verbose mode"
    printf "%-3s %-15s %s\n" -t --tar "In specified destination tar archive with backup will be created/updated"
    printf "%-3s %-15s %s\n" -e --encrypt "Outcome tar archive will be encrypted with given password"
    printf "%-3s %-15s %s\n" -a --accurate "Files are compared by content instead of name, size and last modifying date"
    printf "%-3s %-15s %s\n" -c --copy "Simple copy/archive files without comparison"

    

}

function print_stats()
{
    print_verbose_message "$FILES_CREATED created, $FILES_UPDATED updated, $FILES_IGNORED ignored, $FILES_REMOVED removed"
}

function compare_files() # params: file1 file2
{
    local file1=$1
    local file2=$2



    local file1_size=$(stat -c %s "$file1")
    local file2_size=$(stat -c %s "$file2")

    if [ "$file1_size" != "$file2_size" ];then
        echo false # "diff size"
        return 0
    fi

    local file1_mod_date=$(stat -c %Y "$file1")
    local file2_mod_date=$(stat -c %Y "$file2")

    if [ "$file1_mod_date" != "$file2_mod_date" ];then
        echo false # "diff mod"
        return 0
    fi

    if [ "$ACCURATE_MODE" != true ];then
        echo true # "acc_mode_off -> files are equal"
        return 0
    else
        local file1_md5sum=$(md5sum "$file1" | awk '{print $1}')
        local file2_md5sum=$(md5sum "$file2" | awk '{print $1}')

        if [ "$file1_md5sum" = "$file2_md5sum" ];then
             echo true # "sum right"
        else
             echo false # "sum bad"
        
        fi
        return 0
    fi
}

function perform_incremental_backup() # params: src_path dest_path
{
    echo "Incremental backup not implemented yet!"
    exit 0
}

function perform_mirror_backup() # params: src_path dest_path
{
    print_verbose_message "Starting mirror backup"    
    local src_path=$1
    local dest_path=$2
    print_verbose_message "Sync between:"
    print_verbose_message "$src_path"
    print_verbose_message "$dest_path"
    printf "\n"
    if [ ! -d "$src_path" ];then
        print_verbose_message "Source directory does not exist. It will be created"
        mkdir "$src_path"
        let FILES_CREATED++
    fi
    if [ ! -d "$dest_path" ];then
        print_verbose_message "Destination directory does not exist. It will be created"
        mkdir "$dest_path"
        let FILES_CREATED++
    fi
    DEST_FILES_LIST_TMP_FILE="/tmp/bckp_dest.$$"
    SRC_FILES_LIST_TMP_FILE="/tmp/bckp_src.$$"
    # local diff_tmp_file="/tmp/bckp_diff.$$"
    cd "$src_path" && find . > "$SRC_FILES_LIST_TMP_FILE"
    cd "$dest_path" && find . > "$DEST_FILES_LIST_TMP_FILE"
    sort "$DEST_FILES_LIST_TMP_FILE" -o "$DEST_FILES_LIST_TMP_FILE"
    sort "$SRC_FILES_LIST_TMP_FILE" -o "$SRC_FILES_LIST_TMP_FILE"
    # print_verbose_message "Source dir files:"
    # cat $SRC_FILES_LIST_TMP_FILE
    # print_verbose_message "Dest dir files:"
    # cat $DEST_FILES_LIST_TMP_FILE
    # print_verbose_message "Diff:"
    oIFS="$IFS"
    IFS=$'\n'
    local files_to_delete=$(comm "$SRC_FILES_LIST_TMP_FILE" "$DEST_FILES_LIST_TMP_FILE" -1 -3)
    local files_to_copy=$(comm "$SRC_FILES_LIST_TMP_FILE" "$DEST_FILES_LIST_TMP_FILE" -2 -3)
    local files_to_compare=$(comm "$SRC_FILES_LIST_TMP_FILE" "$DEST_FILES_LIST_TMP_FILE" -1 -2)
    local dirs_to_delete
    for file in $files_to_delete
    do
        if [ -f "$dest_path/$file" ];then
            print_verbose_message "Removing file: $dest_path/$file"
            cd "$dest_path" && rm "$file"
            let FILES_REMOVED++
        elif [ -d "$dest_path/$file" ];then
            dirs_to_delete+=$file
        fi
    done
    for directory in $dirs_to_delete
    do
        print_verbose_message "Removing dir: $dest_path/$file"        
        cd "$dest_path" && rmdir $directory
        let FILES_REMOVED++
    done
    
    for file in $files_to_copy
    do
        if [ -d "$src_path/$file" ];then
            print_verbose_message "Creating dir: $dest_path/$file"
            mkdir "$dest_path/$file" # 2> /dev/null
            let FILES_CREATED++
        elif [ -f "$src_path/$file" ];then
            print_verbose_message "Creating file: $dest_path/$file"
            cp -R "$src_path/$file" "$dest_path/$file" --preserve=timestamps # 2> /dev/null
            let FILES_CREATED++
        fi
        
    done

    for file in $files_to_compare
    do
        if [ "$file" = "." -o -d "$src_path/$file" ];then continue;fi
        if [ $(compare_files "$src_path/$file" "$dest_path/$file") = "false" ];then
            print_verbose_message "Updating: $dest_path/$file"
            cp "$src_path/$file" "$dest_path/$file" --preserve=timestamps # 2> /dev/null
            let FILES_UPDATED++
        else
            print_verbose_message "Ignoring: $dest_path/$file"
            let FILES_IGNORED++
        fi
    done
    

    IFS="$oIFS"
}
# ____________________________________________________Start point_________________________________________________________
trap dispose EXIT
SOURCE_PATH=''
DESTINATION_PATH=''
BACKUP_MODE='mirror'
ARCHIVE_MODE=false
ACCURATE_MODE=false
ENCRYPT=false
VERBOSE=false
FILES_UPDATED=0
FILES_REMOVED=0
FILES_IGNORED=0
FILES_CREATED=0

ARGS=$(getopt -n "$0" -o hvVMis:d:acm --long "help, version, mirror, incremental,src:, dest:, verbose, tar, encrypt, accurate, copy" -- "$@")

if [ $? -ne 0 ] 
then
    echo "Something went wrong, sorry!"
    print_usage
    exit 1
fi

eval set -- "$ARGS"

while true 
do
    case "$1" in
        -s|--src)
            SOURCE_PATH="$2"
            shift 2
            ;;
        -d|--dest)
            DESTINATION_PATH="$2"
            shift 2
            ;;
        -m|--mirror)
            BACKUP_MODE="mirror"
            shift
            ;;
        -i|--incremental)
            BACKUP_MODE="incremental"
            shift
            ;;
        -v|--version)
            print_version
            exit 0
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        -V|--verbose)
            VERBOSE=true
            shift
            ;;
        -t|--tar)
            ARCHIVE_MODE=true
            shift
            ;;
        -e|--encrypt)
            ENCRYPT=true
            shift
            ;;
        -a|--accurate)
            ACCURATE_MODE=true
            shift
            ;;
        -c|--copy)
            BACKUP_MODE="copy"
            shift
            ;;
        --)
            shift;break;;
    esac
    
done

if [ "$SOURCE_PATH" == "" ] 
then
    echo "You must specify source path"
    print_usage
    exit 1
fi

if [ "$DESTINATION_PATH" == "" ] 
then
    echo "You must specify destination path"
    print_usage
    exit 1
fi
if [ "$VERBOSE" = true ] 
then
    printf "Selected backup settings:\n"
    printf "\tSOURCE_PATH = $SOURCE_PATH\n"
    printf "\tDESTINATION_PATH = $DESTINATION_PATH\n"
    printf "\tBACKUP_MODE = $BACKUP_MODE\n"
    printf "\tARCHIVE_MODE = $ARCHIVE_MODE\n"
    printf "\tACCURATE_MODE = $ACCURATE_MODE\n"
    printf "\tENCRYPT = $ENCRYPT\n"
    printf "\tVERBOSE_MODE = $VERBOSE\n\n"
fi
if [ "$ARCHIVE_MODE" = true ]                                               # archive mode
then
    echo "Archive mode not implemented yet"
    exit 0
else                                                                        # normal mode
    if [ "$BACKUP_MODE" = "copy" ]
    then                                                                        # copy mode
        print_verbose_message "Copy mode selected. Starting copy operation"
        cp -R "$SOURCE_PATH" "$DESTINATION_PATH"
        print_verbose_message "Copying operation finished successful"
        exit 0
    elif [ "$BACKUP_MODE" = mirror ]
    then                                                                        # mirror mode
        perform_mirror_backup "$SOURCE_PATH" "$DESTINATION_PATH"
        print_verbose_message "Mirror backup finished!"
        print_stats
    elif [ "$BACKUP_MODE" = incremental ];then
        perform_incremental_backup "$SOURCE_PATH" "$DESTINATION_PATH"
        print_verbose_message "Incremental backup finished!"
        print_stats
    fi
fi